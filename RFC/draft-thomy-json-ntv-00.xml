<?xml version="1.0" encoding="utf-8"?>

<?xml-model href="rfc7991bis.rnc"?>  


<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>

<rfc
  xmlns:xi="http://www.w3.org/2001/XInclude"
  category="info"
  docName="draft-thomy-json-ntv"
  ipr="trust200902"
  obsoletes=""
  updates=""
  submissionType="IETF"
  xml:lang="en"
  version="0">

  <front>
    <title abbrev="JSON-NTV">JSON-NTV semantic format</title>
    <seriesInfo name="Internet-Draft" value="draft-thomy-json-ntv"/>
    <author fullname="THOMY" initials="PT" role="editor" surname="Philippe">
      <organization>Loco-labs</organization>
      <address>
        <postal>
          <street>476 chemin du gaf de Famian</street>
          <city>BOLLENE</city>
          <code>84 500</code>
          <country>FR</country>
        </postal>        
        <email>philippe@loco-labs.io</email>  
        <uri>https://github.com/loco-philippe/NTV/blob/main/README.md</uri>
      </address>
    </author> 
    <date year="2023"/>
    <area>General</area>
    <workgroup>Internet Engineering Task Force</workgroup>
    <keyword>JSON SEMANTIC</keyword>

    <abstract>
      <t>This document describes a set of simple rules for unambiguously and concisely encoding semantic data into 
      JSON Data Interchange Format <xref target="RFC8259" />. These rules and framework, called JSON-NTV (JSON with 
      Named and Typed Values), relies on the rules defined in the <xref target="JSON-ND" />.
      </t>
    </abstract>
  </front>

  <middle>
    <section>
      <name>Introduction</name>
      <section>
        <name>Presentation</name>
        <t>Today, the semantic level of shared data remains low. It is very often limited to the type of data defined 
        in the exchange formats (strings for CSV formats; numbers, strings, arrays and objects for JSON formats).</t>
        <t>JSON-NTV proposes to increase the semantic level of the JSON entities by adding two additional pieces of information
         to a JSON entity :
            <ul>
            <li><strong>name</strong>: interpretation of the value in human language or detailed information (e.g., “beginning of the observation”)
             or link to external information(e.g., “https://github.com/loco-philippe/Environmental-Sensing/tree/main”),</li>
            <li><strong>type</strong>: interpretation of the value in a data standard (e.g. GeoJSON, datetime) or in a data catalog or 
            in a software language.</li></ul></t>

        <t>The NTV entity is thus a triplet with a mandatory element (value) and two additional elements (name, type). </t>
          <ul empty="true">
            <li><em>For example, Paris location can be represented by : </em>
              <ul spacing="compact">
                <li><em>a name : “paris”,</em></li>
                <li><em>a type : geoJSON Point coordinates,</em></li>
                <li><em>a value : [2.3522, 48.8566]</em></li>
              </ul>
            </li>
          </ul>
        
        
        <t>The easiest way to add that information into a JSON-value is to use a JSON-object with a single member using 
        the syntax JSON-ND for the first term of the member and the JSON-value for the second term of the member.</t>
        
        <ul empty="true">
          <li><em>The JSON value of the previous example is:</em>
            <ul spacing="compact" empty="true">
              <li><em>{ “paris:point” : [2.3522, 48.8566] }</em></li>
            </ul>
          </li>
        </ul>
        
        
        <t>With this approach, two NTV entities are defined :
          a primitive entity which is not composed of any other entity,
          a structured entity which is an ordered sequence of NTV entities.
        as well as two JSON formats depending on the presence of the additional elements : 
          simple format when name and type are not present
          named format when name or type is present </t>
        
        <t>Example (entity composed of two other primitive entities): 
          { “cities::point”: [[2.3522, 48.8566], [4.8357, 45.7640]] } 
          {“cities::point”: {“paris”:[2.3522, 48.8566], “lyon”:[4.8357, 45.7640]}}</t>
        
        <t>A JSON-NTV generator produces a JSON-value from a NTV entity and vice versa a JSON-NTV parser transforms a 
        JSON-value into a NTV entity. </t>
        
        <t>The conversion between NTV entity and software object is not the subject of this note.</t>
      </section>
      
      <section>
        <name>Requirements Language</name>
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
          "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT
          RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be
          interpreted as described in BCP 14 <xref target="RFC2119"/>
          <xref target="RFC8174"/> when, and only when, they appear in
          all capitals, as shown here.</t>
      </section>
      <!-- [CHECK] The 'Requirements Language' section is optional -->

    </section>
    
    <section>
      <name>Body [REPLACE]</name>
      <t>Body text [REPLACE]</t>
      
      <ol>
        <li>Ordered list item [REPLACE/DELETE]</li>
      </ol>
      
      <ul>
        <li>Bulleted list item [REPLACE/DELETE]</li>
      </ul>
      
      <dl newline="true">
        <!-- Omit newline="true" if you want each definition to start on the same line as the corresponding term -->
        <dt>First term: [REPLACE/DELETE]</dt>
        <dd>Definition of the first term [REPLACE/DELETE]</dd>
        <dt>Second term: [REPLACE/DELETE]</dt>
        <dd>Definition of the second term [REPLACE/DELETE]</dd>
      </dl>
      
      <table>
        <thead>
        <!-- [REPLACE/DELETE] a table header is optional -->
          <tr><th>Column 1 [REPLACE]</th></tr>
        </thead>
        <tbody>
          <tr><td>Cell [REPLACE]</td></tr>
        </tbody>
      </table>

      <figure>
        <name>Source [REPLACE]</name>
        <sourcecode name="suggested filename [REPLACE/DELETE]" type="language [REPLACE/DELETE]" markers="true">
          <![CDATA[
source code goes here [REPLACE]
          ]]>
        </sourcecode>
        <!-- [CHECK] markers="true" means that the rendered file will have <CODE BEGINS> and <CODE ENDS> added -->
      </figure>

      <figure>
        <name>Diagram [REPLACE]</name>
        <artset>
        <!-- This <artset> includes two <artwork> elements, each of a different type -->
          <artwork type="svg" src="https://www.rfc-editor.org/materials/format/svg/stream.svg" />
          <!-- [REPLACE] src points to either a local file or a URI. -->
          <artwork type="ascii-art" name="stream.txt">
            <!-- [REPLACE/DELETE] name recommends a filename to use if the diagram is extracted -->  
            <![CDATA[
 ascii-art diagram goes here [REPLACE]
            ]]>
          </artwork>
        </artset>
      </figure>
    </section>   
    
    <section anchor="IANA">
    <!-- All drafts are required to have an IANA considerations section. See RFC 8126 for a guide.-->
      <name>IANA Considerations</name>
      <t>This memo includes no request to IANA. [CHECK]</t>
    </section>
    
    <section anchor="Security">
      <!-- All drafts are required to have a security considerations section. See RFC 3552 for a guide. -->
      <name>Security Considerations</name>
      <t>This document should not affect the security of the Internet. [CHECK]</t>
    </section>
    
    <!-- NOTE: The Acknowledgements and Contributors sections are at the end of this template -->
  </middle>

  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.5234.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8259.xml"/>
        <!-- The recommended and simplest way to include a well known reference -->
        
      </references>
 
      <references>
        <name>Informative References</name>
       
        <reference anchor="exampleRefMin">
        <!-- [REPLACE/DELETE] Example minimum reference -->
          <front>
            <title>Title [REPLACE]</title>
            <author initials="Initials [REPLACE]" surname="Surname [REPLACE]">
              <organization/>
            </author>
            <date year="2006"/>
            <!-- [CHECK] -->
          </front>
        </reference>

        <reference anchor="JSON-ND" target="https://github.com/glenkleidon/JSON-ND">
        <!-- [REPLACE/DELETE] Example reference written by an organization not a person -->
          <front>
            <title>JSON-ND</title>
            <author>
              <organization>Organization [REPLACE]</organization>
            </author>
            <date year="1984"/>
            <!-- [CHECK] -->
          </front>
        </reference>       
       
      </references>
    </references>
    
    <section>
      <name>Appendix 1 [REPLACE/DELETE]</name>
      <t>This becomes an Appendix [REPLACE]</t>
    </section>

    <section anchor="Acknowledgements" numbered="false">
      <!-- [REPLACE/DELETE] an Acknowledgements section is optional -->
      <name>Acknowledgements</name>
      <t>This template uses extracts from templates written by Pekka Savola, Elwyn Davies and 
        Henrik Levkowetz. [REPLACE]</t>
    </section>
    
    <section anchor="Contributors" numbered="false">
      <!-- [REPLACE/DELETE] a Contributors section is optional -->
      <name>Contributors</name>
      <t>Thanks to all of the contributors. [REPLACE]</t>
      <!-- [CHECK] it is optional to add a <contact> record for some or all contributors -->
    </section>
    
 </back>
</rfc>
