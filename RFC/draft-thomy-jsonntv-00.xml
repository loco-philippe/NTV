<?xml version="1.0" encoding="utf-8"?>
<?xml-model href="rfc7991bis.rnc"?>  
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">]>
<rfc
  xmlns:xi="http://www.w3.org/2001/XInclude"
  category="info"
  docName="draft-thomy-jsonntv-00"
  ipr="trust200902"
  obsoletes=""
  updates=""
  submissionType="IETF"
  xml:lang="en"
  version="0">
  <front>
    <title abbrev="JSON-NTV">JSON-NTV semantic format</title>
    <seriesInfo name="Internet-Draft" value="draft-thomy-jsonntv-00"/>
    <author fullname="Philippe THOMY" initials="P" role="editor" surname="THOMY">
      <organization>Loco-labs</organization>
      <address>
        <postal>
          <street>476 chemin du gaf de Famian</street>
          <city>BOLLENE</city>
          <code>84 500</code>
          <country>FR</country></postal>        
        <email>philippe@loco-labs.io</email>  
        <uri>https://github.com/loco-philippe/NTV/blob/main/README.md</uri>
      </address>
    </author> 
    <date year="2023"/>
    <area>General</area>
    <workgroup>Internet Engineering Task Force</workgroup>
    <keyword>JSON SEMANTIC</keyword>
    <abstract>
      <t>This document describes a set of simple rules for unambiguously and concisely encoding semantic data into 
      JSON Data Interchange Format. These rules and framework, called JSON-NTV (JSON with 
      Named and Typed Values), relies on the rules defined in the.</t>
    </abstract>
  </front>
  <middle>
    <section><name>Introduction</name>
      <section><name>Presentation</name>
        <t>Today, the semantic level of shared data remains low. It is very often limited to the type of data defined 
        in the exchange formats (strings for CSV formats; numbers, strings, arrays and objects for JSON formats).</t>
        <t>JSON-NTV proposes to increase the semantic level of the JSON entities <xref target="RFC8259"/> 
        by adding two additional pieces of information to a JSON entity :<ul>
          <li><strong>name</strong>: interpretation of the value in human language or detailed information or link to external information,</li>
          <li><strong>type</strong>: interpretation of the value in a data standard (e.g. GeoJSON, datetime), in a data catalog or 
          in a software language.</li></ul>
        </t>
        <t>The NTV entity is thus a triplet with a mandatory element (value) and two additional elements (name, type). </t>
        <ul empty="true">
          <li><em>For example, Paris location can be represented by : </em><ul spacing="compact">
            <li><em>a name : "paris",</em></li>
            <li><em>a type : geoJSON Point coordinates <xref target="RFC7946"/>,</em></li>
            <li><em>a value : [2.3522, 48.8566]</em></li>
          </ul></li>
        </ul>
        <t>The easiest way to add that information into a JSON-value is to use a JSON-object with a single member using 
        the syntax JSON-ND <xref target="JSON-ND"/> for the first term of the member and the JSON-value for the second term of the member.</t>
        <ul empty="true">
          <li><em>The JSON value of the previous example is:</em><ul spacing="compact" empty="true">
            <li><em>{ "paris:point" : [2.3522, 48.8566] }</em></li>
          </ul></li>
        </ul>
        <t>With this approach, two NTV entities are defined :<ul>
          <li><strong>a primitive entity</strong> which is not composed of any other entity,</li>
          <li><strong>a structured entity</strong> which is an ordered sequence of NTV entities.</li></ul>
        as well as two JSON formats depending on the presence of the additional elements : <ul>
          <li><strong>simple format</strong> when name and type are not present</li>
          <li><strong>named format</strong> when name or type is present </li></ul></t>
        <ul empty="true">
          <li><em>Example (entity composed of two other primitive entities): </em><ul spacing="compact" empty="true">
            <li><em>{ "cities::point": [[2.3522, 48.8566], [4.8357, 45.7640]] } </em></li>
            <li><em>{"cities::point": {"paris":[2.3522, 48.8566], "lyon":[4.8357, 45.7640]}}</em></li>
          </ul></li>
        </ul>
        <t>A JSON-NTV generator produces a JSON-value from a NTV entity and vice versa a JSON-NTV parser transforms a 
        JSON-value into a NTV entity. </t>
        <t>The conversion between NTV entity and software object is not the subject of this note.</t>
      </section>
      <section><name>Key design features</name>
        <t>The format is focused on simplicity, lightness and web usage.</t>
        <t>The key features of this format are the following: <ul>
          <li><strong>JSON as the base format</strong><ul>
            <li>JSON is simple and readable as simple text</li>
            <li>JSON supports rich structure including nesting and basic types</li>
            <li>JSON is web-native and very widely used and supported</li>
            <li>JSON format has binary representation (i.e. CBOR format)</li></ul></li>
          <li><strong>high semantic level of data</strong><ul>
            <li>wide variety of data typing</li>
            <li>tree-like and customisable data typing </li></ul></li>
          <li><strong>compatibility with existing formats</strong><ul>
            <li>JSON data is a JSON-NTV data</li>
            <li>most of NTV types are existing types</li>
            <li>the defined types integrate the data catalogs (i.e.  schemaorg, darwincore)</li></ul></li>
          <li><strong>compatibility with any type of platform</strong><ul>
            <li>types and structures are independent of software and hardware platforms</li>
            <li>the NTV concept is applicable to all types of software and data</li></ul></li>
          <li><strong>reversibility</strong><ul>
            <li>the NTV entity coming from a Json is identical to the NTV entity from which the Json comes</li>
            <li>the Json representation of an NTV entity is the same as the Json value used to construct the NTV entity</li></ul></li>
        </ul></t>
      </section>     
      <section><name>Requirements Language</name>
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
          "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT
          RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be
          interpreted as described in BCP 14 <xref target="RFC2119"/>
          <xref target="RFC8174"/> when, and only when, they appear in
          all capitals, as shown here.</t>
        <t>This document also uses the following terms:</t><dl newline="true">    
          <dt><strong>JsonType, JsonText, JsonName, JsonValue, JsonObject, JsonMember, JsonElement, JsonArray, JsonNumber,
           JsonString, JsonFalse, JsonNull, JsonTrue:</strong></dt>
          <dd>These terms are defined as type, text, name, value, object, member, element, array, number, string, false, 
          null, true in the JSON grammar.</dd>
          <dt><strong>JsonPrimitive:</strong></dt>
          <dd>A JsonNumber, JsonString, JsonFalse, JsonTrue or JsonNull.</dd>
          <dt><strong>JsonUnnamed:</strong></dt>
          <dd>A JSON-object without a single member.</dd>
          <dt><strong>JsonNamed:</strong></dt>
          <dd>A JSON-object with a single member.</dd>
          <dt><strong>NTVsingle, NTVlist:</strong></dt>
          <dd>NTVlist and NTVsingle entities can be abbreviated as:<ul>
                <li>NVsingle : entity with default NTVtype "json",</li>
                <li>NVlist : entity without NTVtype,</li>
                <li>TVsingle, TVlist : entity without NTVname,</li>
                <li>Vsingle, Vlist : NVsingle or NVlist without NTVname.</li></ul></dd>
        </dl>
      </section>
    </section>
    <section><name>NTV structure</name>
      <section><name>NTV entities</name>
        <t>The NTV entity is a triplet (NTVvalue, NTVtype, NTVname).</t>
        <t>The triplet contains all the data needed to reconstruct the software object.</t>
        <t>Two categories of entities (one primitive and one structured) are defined:<ul>
          <li>NTVsingle for the primitive entity,</li>
          <li>NTVlist for an ordered sequence of NTV entities</li></ul></t>
        <t>Entities are defined in <xref target="NTVentities-abnf" format="default" sectionFormat="of" derivedContent="Figure 1"/>, 
        which uses ABNF from <xref target="RFC5234"/>.</t>
        <figure anchor="NTVentities-abnf" align="left" suppress-title="false" pn="figure-1">
          <name>NTV entities - ABNF</name>
          <sourcecode type="abnf" markers="false">
  ; notation:
  ;   "Object(" *param ")" represent an Object defined 
  ;   by a list of parameters (param)
  
  ;   JsonArray(*param) represent a JsonArray as defined 
  ;   in the Json grammar, *param is a list of JsonElement
  ;   JsonObject(*param) represent a JsonObject as defined 
  ;   in the Json grammar, *param is a list of JsonMember
  ;   JsonValue represent a JsonValue as defined 
  ;   in the Json grammar

  NTVentity = NTVsingle / NTVlist
  
  NTVsingle = "NTVsingle(" NTVsingleValue  NTVname  NTVsingleType ")"
  NTVsingleType  = NTVtype 
  NTVsingleValue = JsonValue

  NTVlist   = "NTVlist(" NTVlistValue  NTVname  NTVlistType ")"
  NTVlistType    = NTVtype / Namespace
  NTVlistValue   = *NTVentity
  
  NTVname        = string
  JsonValue      = string

  string   = DQUOTE *CHAR DQUOTE
  DQUOTE   = %x22          ; " double quote
  CHAR     = %x01-7F

          </sourcecode>
        </figure>
        <section><name>NTVsingle</name>
          <t>The NTVvalue (NTVsingleValue) is the JSON representation of the NTV entity (JsonValue).</t>
          <t>The NTVtype (NTVsingleType) defines the type of entity and the conversion rules between the NTV entity and the NTVvalue. 
          The default value is the "json" type.</t>
          <t>The NTVname is a string</t>
          <t><strong>In other words, any entity that has on the one hand a function of encoding it into a json value and 
          on the other hand a function of creating from a json value can be taken into account.
          This approach is very general because the majority of computer objects are defined by a list of parameters 
          (e.g. *args in python) and/or a list of key/values (e.g. **kwargs in python) 
          which simply translate into a JSON-Array or a JSON-Object.</strong></t>
        </section>
        <section><name>NTVlist</name>
          <t>The NTVvalue (NTVlistValue) is the list of included NTV entities.</t>
          <t>The NTVtype (NTVlistType) is a Namespace or a default NTVtype to apply to the NTV entities included. 
          This NTVtype avoids having to include a type (if default NTVtype) 
          or reduce the length (if Namespace) in the JSON representation of the included NTV entities. The default value is "None".</t>
          <t>The NTVname is a string.</t><ul empty="true">
            <li><em>Example of equivalent JSON representations:</em><ul spacing="compact" empty="true">
              <li><em>where NTVtype is None for the NTVlist</em><ul spacing="compact" empty="true">
                <li><em>[ { ":point" : [2.3522, 48.8566]}, {":point" : [4.8357, 45.7640]} ] </em></li>
              </ul></li>
              <li><em>where NTVtype is "point" for the NTVlist</em><ul spacing="compact" empty="true">
                <li><em>{ ":point" : [ [2.3522, 48.8566], [4.8357, 45.7640] ] }</em></li>
              </ul></li>
            </ul></li>
            <li><em>If JSON-value is { "::dat" : ["2022-01-28T18-23-54", {":point": [1.1, 2.2] ] } }, 
            the parsers deduce that the first NTVvalue has a  "dat" NTVtype and the second a "point" NTVtype.</em></li>
          </ul>
        </section>
      </section>
      <section><name>NTVtype</name>
        <t>NTVtype and associated Namespace  are defined in 
        <xref target="NTVtype-abnf" format="default" sectionFormat="of" derivedContent="Figure 2"/>, 
        which uses ABNF from <xref target="RFC5234"/>.</t>
        <figure anchor="NTVtype-abnf" align="left" suppress-title="false" pn="figure-2">
          <name>NTVtype - ABNF</name>
          <sourcecode type="abnf" markers="false">
; Namespace and NtvType

Namespace       = "Namespace(" NamespaceName NamespaceParent ")" 
NamespaceParent = Namespace  ; Namespace is nested
NamespaceName   = [ ["$"] string "." ] 
JsonNamespace   = JsonNamespaceParent NamespaceName
JsonNamespaceParent = JsonNamespace

NTVtype     = "NTVtype(" NTVtypeName NamespaceParent [NTVtypeGen] ")"
NTVtypeGen  = NTVtype
NTVtypeName = ["$"] string
JsonNTVtype = JsonNamespaceParent NTVtypeName  

          </sourcecode>
        </figure>
        <t>A NTVtype is defined by a name (NTVtypeName) and a Namespace parent (NamespaceParent). 
        The NTVtype is unique in the Namespace parent.</t>
        <t>NTVtype and the rules to encode or decode NTVvalues MUST be understood by data producers and data consumers.</t>
        <t>So NTVtype and rules associated have to be defined in a specification shared by a large community.</t>
        <t>On the other hand, it must be possible for everyone to share data according to their own data structure.</t>
        <t>There are therefore two categories of data: <ul>
          <li>custom NTVtype (and Namespace) which can be created by anyone without control,</li>
          <li>shared NTVtype (and Namespace) that are defined and used in a single, shared repository.</li></ul></t>
        <t>The corresponding rules are as follows:<ul>
          <li>NTVtype (or Namespace) whose name begins with '$' is of type 'custom'</li>
          <li>NTVtype (or Namespace) included in a Namespace of type 'custom' is also of type 'custom'</li>
          <li>Each 'shared' Namespace or NTVtype is uniquely managed.</li></ul></t>
        <t><em>Example:</em> <ul empty="true">
          <li><em>If "fr." is a Namespace attached to the global Namespace and containing the Namespace 'BAN.' and the NTVtype 'dep', then:</em> <ul>
            <li><em>"fr.dep" is a shared NTVtype,</em></li>
            <li><em>"fr.$test" is a custom NTVtype,</em></li>
            <li><em>"fr.$example.one" is a custom NTVtype</em></li>
            <li><em>"fr.BAN.$test" is a custom NTVtype</em></li></ul>
        </li></ul></t>
        <t>A Namespace is included in a Namespace parent (NamespaceParent) and may contain Namespace child.</t>
        <t>A Namespace is represented by a string followed by a point (NamespaceName). 
        The global Namespace (root node in the Namespace tree) is represented by an empty string and its NamespaceParent is None. 
        The Namespace representations are added to the value of an NTVtype to have an absolute representation of an NTVtype (JsonNTVtype).</t>
        <t><em>Example for an absolute representation of an NTVtype defined in two nested Namespace in the global Namespace:</em> <ul empty="true">
          <li><em>"ns1.ns2.type" </em> </li>
          <li><em> where:</em> <ul empty="true">
            <li><em>ns1. is a Namespace defined in the global Namespace,</em> </li>
            <li><em>ns2. is a Namespace defined in the ns1. Namespace,</em> </li>
            <li><em>type is a NTVtype defined in the ns2. Namespace</em> </li></ul>
        </li></ul></t>
        <t>Three categories of NTVtype are defined (None, Simple, Generic).<ul>
          <li>The "None" NTVtype is used with NTVlist to indicate the absence of a default Type.</li>
          <li>If NTVtype is Simple, the rules associated with the NTVtype are used  for the conversion between an entity and a NTVvalue.</li>
          <li>The Generic NTVtype (NTVtypeGen) is equivalent to a set of Simple NTVtype. 
          This indicates that parsers can use an associated simple NTV type to decode the JsonNTVvalue.</li></ul></t>
        <t><em>Example:</em> <ul empty="true">
          <li><em>"dat" is the generic NTVtype for "datetime" and "timeposix"</em> </li>
          <li><em> If a JSONvalue is { "::dat" : ["2022-01-28T18-23-54", 123456.78] }, the parser deduce that the NTVvalue of included entities 
          has a NTVtype with a "dat" NTVtypeGen. The parser of included NTV entities deduces that the first object has an equivalent "datetime" 
          NTVtype and the second an equivalent "timeposix" NTVtype.</em></li>
        </ul></t>       
        <t>This structuring of type makes it possible to reference any type of data that has a JSON representation and to consolidate 
        all the shared data structures within the same tree of types.</t>
      </section>      
    </section>
    <section><name>JsonNTV</name>
      <section><name>JsonNTV format</name>
        <t>The JsonNTV format is the JsonValue representation of an NTV entity as defined in 
        <xref target="JsonNTV-abnf" format="default" sectionFormat="of" derivedContent="Figure 3"/>, 
        which uses ABNF from <xref target="RFC5234"/>.</t>
        <figure anchor="JsonNTV-abnf" align="left" suppress-title="false" pn="figure-3">
          <name>JsonNTV - ABNF</name>
          <sourcecode type="abnf" markers="false">
; JsonValue representation of NTV entities

JsonNTV        = JsonNTVnamed / JsonNTVsimple

JsonNTVnamed   = "JsonObject(" JsonNTVname ":" JsonNTVvalue ")" 
JsonNTVsimple  = JsonNTVvalue

JsonNTVname    = NTVname / (NTVname JsonType) / JsonType
JsonType       = [singleSep [JsonNTVtype]] / [listSep [JsonNTVtype]]  

singleSep   = ":"      ; NTVsingle separator 
listSep     = "::"     ; NTVlist separator
          </sourcecode>
        </figure>
        <t>The JsonNTV format is built with the NTVname, NTVvalue and the JsonNTVtype.</t>
        <t>Two JsonNTV formats are defined:<ul>
          <li>named format (if NTVname or JsonType is not an empty string): <ul empty="true">
            <li><em>{ JsonNTVname : JsonNTVvalue }</em></li></ul></li>
          <li>simple format (if NTVname and JsonType are empty string): <ul empty="true">
            <li><em>JsonNTVvalue</em></li></ul></li>
        </ul></t>
        <t>This format allows full compatibility with existing JSON structures:<ul>
          <li>a JsonNumber, JsonString, JsonNull or JsonBoolean is the representation of a Vsingle entity,</li>
          <li>a JsonObject with a single member is the representation of an NVsingle or TVsingle entity,</li>
          <li>a JsonArray is the representation of a Vlist entity,</li>
          <li>a JsonObject without a single member is the representation of a Vlist entity composed with unnamed entities.</li>
        </ul></t>
        <t><em>Note :</em><ul>
          <li><em>JsonNTV : 21, { ":" : 21 } and { ":json" : 21 } represent the same Vsingle entity,</em></li>
          <li><em>a NTVlist with a single included entity has a JsonNTVname with a pair of colons e.g. { "::" : { "age" : 21 } }</em></li>
        </ul></t>
      </section>
      <section><name>JsonNTVname</name>
        <t><strong>JsonNTVname</strong></t><ul empty="true">
          <li>JsonNTVname is the concatenation of NTVname and JsonType.</li>
          <li>If the JsonNTVname contains one colon, the entity is a NTV-single.</li>
          <li>If the JsonNTVname contains two adjacent colons, the entity is an NTV-list.</li></ul>
        <t><strong>JsonType</strong></t><ul empty="true">
          <li>The JsonType is composed with the separator singleSep or listSep and the JsonNTVtype.</li>
          <li>For NTVsingle entities:<ul>
            <li>The JsonType is identical to the singleSep joined with JsonNTVtype if JsonNTVtype is not "json".</li>
            <li>If JsonNTVtype is "json" and JsonNTVvalue is not a JsonArray and not a JsonObject with not a single member, the JsonType is empty.</li>
            <li>If JsonNTVtype is "json" and JsonNTVvalue is a JsonArray or a JsonObject with not a single member, the JsonType is ":".</li></ul></li>
          <li>For NTVlist entities:<ul>
            <li>The JsonType is identical to the listSep joined with JsonNTVtype if JsonNTVtype is not "json".</li>
            <li>If JsonNTVtype is "json" and JsonNTVvalue is not a JsonArray and not a JsonObject with not a single member, the JsonType is "::".</li>
            <li>If JsonNTVtype is "json" and JsonNTVvalue is a JsonArray or a JsonObject with not a single member, the JsonType is empty.</li></ul></li>
          <li>For NTV entities included in another entity, the JsonType MAY be set to :<ul>
            <li>The empty string if the NTVtype of the structured NTV entity is identical to the NTVtype of the NTV entity,</li>
            <li>relative NTVtype if the NTVtype of the structured NTV entity is a Namespace shared with the NTVtype of the NTV entity.</li></ul></li></ul>
      </section>
      <section><name>JsonNTVvalue</name>
        <t>The JsonNTVvalue is the JsonValue representation of NTVvalue as defined in 
        <xref target="JsonNTVvalue-abnf" format="default" sectionFormat="of" derivedContent="Figure 4"/>, 
        which uses ABNF from <xref target="RFC5234"/>.</t>
        <figure anchor="JsonNTVvalue-abnf" align="left" suppress-title="false" pn="figure-4">
          <name>JsonNTVvalue - ABNF</name>
          <sourcecode type="abnf" markers="false">
; Json representation of NTVvalue

JsonNTVvalue       = JsonNTVsingleValue / JsonNTVlistValue

JsonNTVsingleValue = NTVsingleValue
JsonNTVlistValue   = JsonArrayValue / JsonObjectValue

JsonArrayValue     = "JsonArray(" *JsonNTV ")"
JsonObjectValue   = "JsonObject(" *(JsonNTVname ":" JsonNTVvalue) ")"

          </sourcecode>
        </figure>
        <t>For a NTVsingle, JsonNTVvalue is the NTVvalue.</t>
        <t>For a NTVlist, JsonNTValue has two representations:<ul>
          <li>a JsonArray where JsonElements are the JsonNTV of included NTV entities,</li>
          <li>a JsonObject where the JsonMembers are the JsonMembers of the JsonNTV of included NTV entities.</li></ul></t>
        <t><em>Note:</em><ul empty="true">
          <li><em>The JsonObject option is available only if all the NTV entities included have a JsonNTVname and 
          all the JsonNTVname are different (e.g. {":point" : [2.3522, 48.8566], ":point" : [4.8357, 45.7640]} 
          is not a valid  JSON-value)</em></li></ul></t>
      </section>
    </section>
    <section><name>examples</name>
      <t>Examples of JsonNTV representation of NTV entities:</t>
      <t><strong>Vsingle :</strong></t><ul empty="true">
        <li><em>"lyon"</em></li>
        <li><em>52.5</em></li>
        <li><em>{ ":" : [4.8357, 45.7640] }</em></li></ul>
      <t><strong>NVsingle : </strong></t><ul empty="true">
        <li><em>{ "city" : "paris" }</em></li>
        <li><em>{ "paris:" : [4.8357, 45.7640] }</em></li></ul>
      <t><strong>TVsingle: </strong></t><ul empty="true">
        <li><em>{ ":point" : [4.8357, 45.7640] }</em></li></ul>
      <t><strong>NTVsingle: </strong></t><ul empty="true">
        <li><em>{ "paris:point" : [2.3522, 48.8566] }</em></li>
        <li><em>{ "paris:ntv" : { "coordinate:point" : [4.8357, 45.7640] } }</em></li></ul>
      <t><strong>Vlist (composed with JsonArray): </strong></t><ul empty="true">
        <li><em>[4, 45]</em></li>
        <li><em>["paris"]</em></li>
        <li><em>[ [2.3522, 48.8566], {"lyon" : [4.8357, 45.7640]} ]</em></li>
        <li><em>[ { ":point" : [2.3522, 48.8566]}, {":point" : [4.8357, 45.7640]} ]</em></li>
        <li><em>[]</em></li></ul>
      <t><strong>Vlist (composed with JsonObject) :</strong></t><ul empty="true">
        <li><em>{ "name": "white", "firstname":"walter", "surname":"heisenberg" }</em></li>
        <li><em>{ "paris:point" : [2.3522, 48.8566] , "lyon" : "france"}</em></li>
        <li><em>{ "paris" : [2.3522, 48.8566], "" : [4.8357, 45.7640]}</em></li>
        <li><em>{ }</em></li></ul>
      <t><strong>NVlist : </strong></t><ul empty="true">
        <li><em>{ "simple list" : [4, 45.7] }</em></li>
        <li><em>{ "cities" : [ { ":point" : [2.3522, 48.8566]}, {":point" : [4.8357, 45.7640]} ] }</em></li></ul>
      <t><strong>TVlist : </strong></t><ul empty="true">
        <li><em>{ "::point" : [ [2.3522, 48.8566], {"lyon" : [4.8357, 45.7640]} ] }</em></li>
        <li><em>{ "::dat" : [ "2022-01-28T18-23-54Z", "2022-01-28", 1234.78 ] }</em></li></ul>
      <t><strong>NTVlist : </strong></t><ul empty="true">
        <li><em>{ "cities::point" : [[2.3522, 48.8566], {"lyon": [4.8357, 45.7640]}] }</em></li>
        <li><em>{ "generic date::dat" : [ "2022-01-28T18-23-54Z", "2022-01-28", 1234.78 ] }</em></li>
        <li><em>{ "various::point" : [ [2.3522, 48.8566], { ":date": "2022-01-28"}</em></li>
        <li><em>{"json": 25 }, { "another NTVlist":: [ 1,2,3]} ] }</em></li></ul>
      <t><strong>NTVlist and NVlist (composed with JsonObject) :</strong></t><ul empty="true">
        <li><em>{ "cities::point": { "paris": [2.352, 48.856], "lyon": [4.835, 45.764]}}</em></li>
        <li><em>{ "cities" : { "paris:point" : [2.3522, 48.8566] , "lyon" : "france"}  }</em></li>
        <li><em>{ "city::" : { "paris" : [2.3522, 48.8566] } }</em></li></ul>
    </section>
    <section><name>Parsing a JsonValue</name>
      <t>A first decoding step identifies the following objects:</t><ul empty='true'>
        <li>JsonNTVvalue, NTVname (if present), separator (if present), JsonNTVtype (if present).</li></ul>
      <t>The tables below present the rules for identifying angle NTV entity.</t> 
      <table anchor="table1" align="left" pn="table-1"><name>Decoding JsonValue</name>
        <thead>
          <tr><th align="left" colspan="1" rowspan="1">JsonValue</th>
              <th align="left" colspan="1" rowspan="1">NTV entity</th></tr>
        </thead><tbody>
          <tr><td align="left" colspan="1" rowspan="1">JsonPrimitive</td>
              <td align="left" colspan="1" rowspan="1">Vsingle</td></tr>
          <tr><td align="left" colspan="1" rowspan="1">JsonUnnamed</td>
              <td align="left" colspan="1" rowspan="1">Vlist</td></tr>
          <tr><td align="left" colspan="1" rowspan="1">JsonArray</td>
              <td align="left" colspan="1" rowspan="1">Vlist</td></tr>
          <tr><td align="left" colspan="1" rowspan="1">JsonNamed</td>
              <td align="left" colspan="1" rowspan="1">see Table 2</td></tr>
        </tbody>
      </table>
      <table anchor="table2" align="left" pn="table-2"><name>Decoding JsonNTVvalue</name>
        <thead>
          <tr><th align="left" colspan="1" rowspan="1">Separator</th>
              <th align="left" colspan="1" rowspan="1">JsonNTVvalue</th>
              <th align="left" colspan="1" rowspan="1">NTV entity</th></tr>
        </thead><tbody>
          <tr><td align="left" colspan="1" rowspan="1">None</td>
              <td align="left" colspan="1" rowspan="1">JsonPrimitive</td>
              <td align="left" colspan="1" rowspan="1">NVsingle</td></tr>
          <tr><td align="left" colspan="1" rowspan="1">None</td>
              <td align="left" colspan="1" rowspan="1">JsonNamed</td>
              <td align="left" colspan="1" rowspan="1">NVsingle</td></tr>
          <tr><td align="left" colspan="1" rowspan="1">None</td>
              <td align="left" colspan="1" rowspan="1">JsonUnnamed</td>
              <td align="left" colspan="1" rowspan="1">NVlist</td></tr>                
          <tr><td align="left" colspan="1" rowspan="1">None</td>
              <td align="left" colspan="1" rowspan="1">JsonArray</td>
              <td align="left" colspan="1" rowspan="1">NVlist</td></tr>
          <tr><td align="left" colspan="1" rowspan="1">":"</td>
              <td align="left" colspan="1" rowspan="1">JsonValue</td>
              <td align="left" colspan="1" rowspan="1">TVsingle or NTVSingle</td></tr>
          <tr><td align="left" colspan="1" rowspan="1">"::"</td>
              <td align="left" colspan="1" rowspan="1">JsonUnnamed</td>
              <td align="left" colspan="1" rowspan="1">NVlist or TVlist or NTVlist</td></tr>
          <tr><td align="left" colspan="1" rowspan="1">"::"</td>
              <td align="left" colspan="1" rowspan="1">JsonArray</td>
              <td align="left" colspan="1" rowspan="1">NVlist or TVlist or NTVlist</td></tr>                                                
        </tbody>
      </table>
      <t>The NTVvalue of NTVsingle is the JsonNTVvalue.</t>
      <t>The NTVvalue of NTVlist is build by decoding data included in JsonNTVvalue.</t>
      <t>For NTV entities not included in a NTVlist, the NTVtype is built with:</t><ul>
        <li>"json" JsonNTVtype if JsonNTVtype is None and if the NTV entity is a NTVsingle,</li>
        <li>the NTVtype build with the JsonNTVType.</li></ul>
      <t>For NTV entities included in a NTVlist, the NTVtype is built with : </t><ul>
        <li>the JsonNTVtype if it is an absolute NTVtype and if the entity is a NTVsingle,</li>
        <li>the concatenation of the JsonNTVtype of the NTVlist and the JsonNTVtype (if it is a relative NTVtype),</li>
        <li>the JsonNTVtype of the NTVlist if the JsonNTVtype is None.</li></ul>
      <t>If the resulting NTVtype is inconsistent, the NTVtype is set to None.</t>
    </section>
    <section><name>tests</name>
      <figure>
        <name>A Box</name>
        <artset>  <!-- https://authors.ietf.org/en/rfcxml-vocabulary#artset -->
        <!-- This <artset> includes two <artwork> elements, each of a different type.  Both are not 
            always needed.  See https://authors.ietf.org/e/en/adding-diagrams -->
          <artwork type="svg" name="https://www.rfc-editor.org/materials/format/svg/stream.svg">  
            <!-- https://authors.ietf.org/en/rfcxml-vocabulary#artwork -->
            <!-- Inserting the SVG like this is only one way of adding an SVG diagram.  Another way is 
                to use the src attribute to point to an external file or URI.  The name attribute 
                recommends a filename to use if the artwork is extracted to a file. -->
            <svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 71 40">
              <g>
                <title>Layer 1</title>
                <rect x="4.5" y="6.5" width="30.0" height="15.0" stroke="black" stroke-width="0.2" 
                stroke-linecap="square" stroke-linejoin="miter" fill="none" />
                <text x="20" text-anchor="middle" y="15">
                  <tspan fill="black" font-size="3.0">A box</tspan>
                </text>
              </g>
            </svg>
          </artwork>
          <artwork type="ascii-art" name="box.txt">
            <![CDATA[
+--------+
| A box  |
+--------+          
            ]]>
          </artwork>
        </artset>      
      </figure>
    </section>   
    
    <section anchor="IANA"><name>IANA Considerations</name>
    <!-- All drafts are required to have an IANA considerations section. See RFC 8126 for a guide.-->
      <t>This memo includes no request to IANA. -CHECK-</t>
    </section>
    
    <section anchor="Security"><name>Security Considerations</name>
      <!-- All drafts are required to have a security considerations section. See RFC 3552 for a guide. -->
      <t>This document should not affect the security of the Internet. -CHECK-</t>
    </section>
    
    <!-- NOTE: The Acknowledgements and Contributors sections are at the end of this template -->
  </middle>

  <back>
    <references><name>References</name>
      <references><name>Normative References</name>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.7946.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.5234.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8259.xml"/>
      </references>
      <references><name>Informative References</name>
        <reference anchor="JSON-ND" target="https://github.com/glenkleidon/JSON-ND"><front>
          <title>JSON-ND</title>
          <author initials="G" surname="Kleidon"></author>
          <date year="2020"/>
        </front></reference>      
      </references>
    </references>
    
    <section>
      <name>Appendix 1 - REPLACE/DELETE-</name>
      <t>This becomes an Appendix -REPLACE-</t>
    </section>

    <section anchor="Acknowledgements" numbered="false"><name>Acknowledgements</name>
      <t>TBD</t>
    </section>
    
    <section anchor="Contributors" numbered="false"><name>Contributors</name> 
      <t>Thanks to all of the contributors. -REPLACE-</t>
    </section>
    
 </back>
</rfc>
