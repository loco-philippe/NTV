; NTVentity
NTVentity = NTVsingle / NTVlist
NTVsingle = (NTVsingleValue NTVname NTVsingleType)
NTVlist   = (NTVlistValue   NTVname NTVlistType)

NTVlistType     = NTVtype / Namespace
NTVsingleType   = NTVtype 
NTVlistValue    = *NTVentity
NTVsingleValue  = JsonNTVvalue / NTVsingle
NTVname         = string

; Namespace and NtvType
NameSpace       = (NamespaceName NamespaceParent *NTVtype *NamespaceChild]) ; Namespace is nested
NTVtype         = (NTVtypeName NamespaceParent [NTVtypeGen] ) ; NTVtype is included in a Namespace
NTVtypeGen      = NtvType
NTVtypeName     = string
NamespaceParent = Namespace
NamespaceChild  = Namespace
JsonNTVtype     = JsonNamespace NTVtypeName   ; JsonNamespace is the JsonNamespace of the NamespaceParent
JsonNamespace   = JsonNamespace NamespaceName ; JsonNamespace is the JsonNamespace of the NamespaceParent
NamespaceName   = (string ".") / ""  ; the global namespace is represented by an empty string

; Json representation of NTV entities
JsonNTVrepr     = JsonNTVnamed / JsonNTVsimple
JsonNTVnamed    = beginObject JsonNTVname memSep JsonNTVvalue endObject
JsonNTVsimple   = JsonNTVvalue
JsonNTVname     = NTVname / (NTVname JsonType) / JsonType
JsonType        = (singleSep / listSep) JsonNTVtype

; Json representation of NTVvalue
JsonNTVvalue    = JsonSingleValue / JsonListValue
JsonSingleValue = NTVsingleValue
JsonListValue   = JsonArrayValue / JsonObjectValue
JsonArrayValue  = beginArray  [JsonNTVrepr  *(valSep JsonNTVrepr) ] endArray
JsonObjectValue = beginObject [JsonNTVnamed *(valSep JsonNTVnamed)] endObject



singleSep   = COLON      ; : NTVsingle separator 
listSep     = 2COLON     ; : NTVlist separator 

string      = DQUOTE *CHAR DQUOTE
beginArray  = WS %x5B WS ; [ left square bracket
beginObject = WS %x7B WS ; { left curly bracket
endArray    = WS %x5D WS ; ] right square bracket
endObject   = WS %x7D WS ; } right curly bracket
memSep      = WS %x3A WS ; : JSON-member separator
valSep      = WS %x2C WS ; , JSON-Array separator 


COLON    = %x3A          ; : colon
POINT    = %x2E          ; . point
DQUOTE   = %x22          ; " double quote
CHAR     = %x01-7F
WS       = *( %x20 /     ; Space
              %x09 /     ; Horizontal tab
              %x0A /     ; Line feed or New line
              %x0D )     ; Carriage return
